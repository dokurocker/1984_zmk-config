/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define NUM     1
#define SYMBOL  2
#define SYSTEM  3
#define ALTTAB  4

&mt {
  quick-tap-ms = <200>;
};

// JIS配列からUS配列
// 2(@) : shiftが他のキー（他 6 等）
#define J2U_NN(NAME, NOSFTKEY, SFTKEY) \
  j2u_##NAME: jis_to_us_##NAME { \
    compatible = "zmk,behavior-mod-morph"; \
    \#binding-cells = <0>; \
    bindings = <&kp NOSFTKEY>, <&kp SFTKEY>; \
    mods = <(MOD_LSFT|MOD_RSFT)>; \
  };

// 7(&) : shiftが他のキーのshift（他 8 等）
#define J2U_NS(NAME, NOSFTKEY, SFTKEY) \
  j2u_##NAME: jis_to_us_##NAME { \
    compatible = "zmk,behavior-mod-morph"; \
    \#binding-cells = <0>; \
    bindings = <&kp NOSFTKEY>, <&kp SFTKEY>; \
    mods = <(MOD_LSFT|MOD_RSFT)>; \
    keep-mods = <(MOD_LSFT|MOD_RSFT)>; \
  };

// =(+) : 他のキーのshift、shiftも他のキーのshift（他 ` 等）
#define J2U_SS(NAME, NOSFTKEY, SFTKEY) \
  j2u_##NAME: jis_to_us_##NAME { \
    compatible = "zmk,behavior-mod-morph"; \
    \#binding-cells = <0>; \
    bindings = <&kp LS(NOSFTKEY)>, <&kp SFTKEY>; \
    mods = <(MOD_LSFT|MOD_RSFT)>; \
    keep-mods = <(MOD_LSFT|MOD_RSFT)>; \
  };

// dvorak - qwerty
#define DQ(DVORAK_KEY, QWERTY_KEY) \
  dq_##DVORAK_KEY: dvorak_qwerty_##DVORAK_KEY { \
    compatible = "zmk,behavior-mod-morph"; \
    \#binding-cells = <0>; \
    bindings = <&kp DVORAK_KEY>, <&kp QWERTY_KEY>; \
    mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; \
    keep-mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; \
  };

/ {
    conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if-layers = <NUM SYMBOL>;
      then-layer = <SYSTEM>;
    };
  };

  macros {
    // alttab
    alttab_on: alttab_on {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_press &kp LALT>
        , <&macro_tap &kp TAB>
        , <&macro_press &mo ALTTAB>
        ;
    };

    lha: layer_has_alttab {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      bindings
        = <&macro_param_1to1>
        , <&macro_press &mo MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release &kp LALT>
        , <&macro_tap &to DEFAULT>
        ;
    };
  };

  behaviors {
    J2U_NN(2, N2, LBKT)
    J2U_NN(6, N6, EQUAL)
    J2U_NS(7, N7, N6)
    J2U_NS(8, N8, SQT)
    J2U_NS(9, N9, N8)
    J2U_NS(0, N0, N9)
    J2U_NS(MINUS, MINUS, INT1)
    J2U_SS(EQUAL, MINUS, SEMI)
    J2U_NS(LBKT, RBKT, RBKT)
    J2U_NS(RBKT, NUHS, NUHS)
    J2U_NS(BSLH, INT1, INT3)
    J2U_NN(SEMI, SEMI, SQT)
    J2U_SS(SQT, N7, N2)
    J2U_SS(GRAVE, LBKT, EQUAL)

    dq_SQT: dvorak_qwerty_SQT {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&j2u_SQT>, <&kp Q>;
      mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>;
      keep-mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>;
    };
    DQ(COMMA, W)
    DQ(DOT, E)
    DQ(P, R)
    DQ(Y, T)
    DQ(F, Y)
    DQ(G, U)
    DQ(C, I)
    DQ(R, O)
    DQ(L, P)
    // DQ(A, A)
    DQ(O, S)
    DQ(E, D)
    DQ(U, F)
    DQ(I, G)
    DQ(D, H)
    DQ(H, J)
    DQ(T, K)
    DQ(N, L)
    dq_S: dvorak_qwerty_S {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp S>, <&j2u_SEMI>;
      mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>;
      keep-mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>;
    };
    dq_SEMI: dvorak_qwerty_SEMI {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&j2u_SEMI>, <&kp Z>;
      mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>;
      keep-mods = <(MOD_LGUI|MOD_RGUI|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>;
    };
    DQ(Q, X)
    DQ(J, C)
    DQ(K, V)
    DQ(X, B)
    DQ(B, N)
    // DQ(M, M)
    DQ(W, COMMA)
    DQ(V, DOT)
    DQ(Z, SLASH)

    i_del: ctrl_i_2_del {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&dq_I>, <&kp DEL>;
      mods = <(MOD_LCTL|MOD_RCTL)>;
    };

    d_bspc: ctrl_d_2_bspc {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&dq_D>, <&kp BSPC>;
      mods = <(MOD_LCTL|MOD_RCTL)>;
    };

    kt_off: key_toggle_off_only {
      compatible = "zmk,behavior-key-toggle";
      #binding-cells = <1>;
      toggle-mode = "off";
    };

    lt_at: lt_alttab {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      bindings = <&lha>, <&kp>;
    };
  
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
   &dq_SQT          &dq_COMMA        &dq_DOT          &dq_P            &dq_Y                    &dq_F            &dq_G            &dq_C            &dq_R           &dq_L
   &kp A            &dq_O            &dq_E            &dq_U            &i_del                   &d_bspc          &dq_H            &dq_T            &dq_N           &dq_S
   &dq_SEMI         &dq_Q            &dq_J            &dq_K            &dq_X                    &dq_B            &kp M            &dq_W            &dq_V           &dq_Z
                                     &mt LALT TAB     &lt_at NUM INT5  &mt LCTRL SPACE          &mt LSHFT ENTER  &lt SYMBOL INT4  &mt LGUI ESC
      >;
    };

    num_layer {
      bindings = <
   &kp N1           &j2u_2           &kp N3           &kp N4           &kp N5                   &j2u_6           &j2u_7           &j2u_8           &j2u_9           &j2u_0
   &kp LS(LALT)     &alttab_on       &kp BSPC         &kp LC(LA(DEL))  &kp DEL                  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp F4
   &kp LSFT         &kp LS(LCTL)     &kp LCTL         &kp LA(LCTL)     &kp LALT                 &kp F11          &kp F12          &kp F2           &kp F3           &kp F5
                                     &trans           &trans           &trans                   &kp LS(ENTER)    &trans           &trans
      >;
    };

    symbol_layer {
      bindings = <
   &kp EXCL         &kp LBKT         &kp HASH         &kp DLLR         &kp PRCNT                &kp EQUAL        &kp LS(N6)       &kp LS(SQT)      &kp LS(N8)       &kp LS(N9)
   &j2u_GRAVE       &j2u_SQT         &j2u_SEMI        &j2u_MINUS       &j2u_EQUAL               &kp SLASH        &j2u_BSLH        &kp LT           &j2u_LBKT        &j2u_RBKT
   &kp LS(EQUAL)    &kp LS(N2)       &kp SQT          &kp LS(INT1)     &kp LS(SEMI)             &kp LS(SLASH)    &kp LS(INT3)     &kp GT           &kp LS(RBKT)     &kp LS(NUHS)
                                     &trans           &trans           &trans                   &trans           &trans           &trans
      >;
    };

    system_layer {
      bindings = <
   &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4             &none            &none            &none            &none            &ext_power EP_ON
   &bt BT_DISC 0    &bt BT_DISC 1    &bt BT_DISC 2    &bt BT_DISC 3    &bt BT_DISC 4            &none            &none            &none            &none            &ext_power EP_OFF
   &none            &none            &none            &none            &bt BT_CLR               &none            &none            &none            &none            &none
                                     &none            &none            &none                    &none            &none            &none
      >;
    };

    alttab_layer {
      bindings = <
   &kp ESC          &none            &none            &none            &none                    &none            &none            &none            &none            &none
   &none            &kp TAB          &none            &none            &none                    &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &none
   &kp LSFT         &none            &none            &kt_off LALT     &none                    &none            &none            &none            &none            &none
                                     &none            &none            &none                    &none            &none            &none
      >;
    };

  };
};
